[
    {
        "op": "core/transpose-columns-into-rows",
        "startColumnName": "020$a",
        "columnCount": -1,
        "ignoreBlankCells": true,
        "fillDown": false,
        "separator": null,
        "keyColumnName": "Fields",
        "valueColumnName": "Values",
        "description": "Pivot all ISBN columns so the former headers are in column ``Fields`` and the contents are in the column ``Values``"
      },
      {
        "op": "core/fill-down",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "SYS Number",
        "description": "Fill down cells in column ``SYS Number``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "SYS Number",
        "expression": "grel:row.record.index",
        "onError": "set-to-blank",
        "newColumnName": "Reorder",
        "columnInsertIndex": 1,
        "description": "Create column ``Reorder`` with number of row in project"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "Fields",
        "expression": "grel:row.record.cells[\"SYS Number\"].value[0]+\"-\"+if(contains(value,\" \"),value.split(\" \")[2].substring(0,indexOf(value.split(\" \")[2],\"$\"))+\"-\"+value.split(\" \")[1].substring(1),value.substring(0,indexOf(value,\"$\"))+\"-0\")",
        "onError": "set-to-blank",
        "newColumnName": "Sort ISBN Fields",
        "columnInsertIndex": 0,
        "description": "Create column ``Sort ISBN Fields`` with the SYS number, the MARC field number, and the number of that field tag"
    },
    {
        "op": "core/row-reorder",
        "mode": "row-based",
        "sorting": {
            "criteria": [
                {
                    "valueType": "string",
                    "column": "Sort ISBN Fields",
                    "blankPosition": 2,
                    "errorPosition": 1,
                    "reverse": false,
                    "caseSensitive": false
                }
            ]
        },
        "description": "Reorder rows based on ``Sort ISBN Fields``"
    },
    {
        "op": "core/blank-down",
        "engineConfig": {
            "facets": [],
            "mode": "row-based"
        },
        "columnName": "Sort ISBN Fields",
        "description": "Blank down cells in column ``Sort ISBN Fields``"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "Fields",
        "expression": "grel:substring(value,-5)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Remove field numbers from values in column ``Fields``"
    },
    {
        "op": "core/column-addition",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "baseColumnName": "Sort ISBN Fields",
        "expression": "grel:row.record.cells[\"Sort ISBN Fields\"].value[0]+\"-\"+toString(row.index-row.record.fromRowIndex+1)",
        "onError": "set-to-blank",
        "newColumnName": "Count",
        "columnInsertIndex": 1,
        "description": "Create column ``Count`` to keep all values during the pivot"
    },
    {
        "op": "core/key-value-columnize",
        "description": "Pivot data so values in ``Fields`` are columns with values from ``Values``",
        "keyColumnName": "Fields",
        "valueColumnName": "Values",
        "noteColumnName": ""
    },
    {
        "op": "core/column-removal",
        "description": "Remove column ``Count``",
        "columnName": "Count"
    },
    {
        "op": "core/text-transform",
        "description": "Null all blank cells in column ``020$a``",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "020$a",
        "expression": "grel:if(isBlank(value),null,value)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10
    },
    {
        "op": "core/text-transform",
        "description": "Null all blank cells in column ``020$z``",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "020$z",
        "expression": "grel:if(isBlank(value),null,value)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10
    },
    {
        "op": "core/text-transform",
        "description": "Null all blank cells in column ``020$q``",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "020$q",
        "expression": "grel:if(isBlank(value),null,value)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10
    },
    {
        "op": "core/text-transform",
        "description": "Null all blank cells in column ``776$i``",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "776$i",
        "expression": "grel:if(isBlank(value),null,value)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10
    },
    {
        "op": "core/text-transform",
        "description": "Null all blank cells in column ``776$z``",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "776$z",
        "expression": "grel:if(isBlank(value),null,value)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10
    },
    {
        "op": "core/row-removal",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "776$i",
                    "expression": "isBlank(value)",
                    "columnName": "776$i",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": false,
                                "l": "false"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                },
                {
                    "type": "list",
                    "name": "776$z",
                    "expression": "isBlank(value)",
                    "columnName": "776$z",
                    "invert": true,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": false,
                                "l": "false"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                },
                {
                    "type": "list",
                    "name": "Title",
                    "expression": "isBlank(value)",
                    "columnName": "Title",
                    "invert": true,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": false,
                                "l": "false"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "description": "Remove records without bibliographic info with 776$i data but no ISBN from a 776$z"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "020$q",
                    "expression": "grel:row.record.cells[\"020$q\"].value.length()>1",
                    "columnName": "020$q",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "020$q",
        "expression": "grel:row.record.cells[\"020$q\"].value.join(\"][\")",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "For records with multiple 020$q values, combine all of the values with `][` between them"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "776$i",
                    "expression": "grel:row.record.cells[\"776$i\"].value.length()>1",
                    "columnName": "776$i",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": true,
                                "l": "true"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "record-based"
        },
        "columnName": "776$i",
        "expression": "grel:row.record.cells[\"776$i\"].value.join(\"][\")",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "For records with multiple 776$i values, combine all of the values with `][` between them"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "020$a",
        "expression": "grel:if(isNotNull(value),if(or(value.contains(\" \"),value.contains(\"(\")),if(and(value.contains(\" \"),value.contains(\"(\")),value.substring(0,min(value.indexOf(\" \"),value.indexOf(\"(\")))+\"|\"+value.substring(min(value.indexOf(\" \"),value.indexOf(\"(\"))).trim(),if(value.contains(\" \"),value.split(\" \")[0]+\"|\"+value.substring(value.indexOf(\" \")).trim(),value.split(\"(\")[0]+\"|\"+value.substring(value.indexOf(\"(\")).trim()))+if(isError(row.record.cells[\"020$q\"].value[0]),\"\",\"][\"+row.record.cells[\"020$q\"].value[0]),if(isError(row.record.cells[\"020$q\"].value[0]),value.trim()+\"|eISBN\",value.trim()+\"|\"+row.record.cells[\"020$q\"].value[0])),null)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Add pipe between ISBN and descriptor in ``020$a``, and if ``020$q`` has a value in the record, add that after the pipe as well; if there's no descriptor at all, put `eISBN` after the pipe"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "020$z",
        "expression": "grel:if(isNotNull(value),if(or(value.contains(\" \"),value.contains(\"(\")),if(and(value.contains(\" \"),value.contains(\"(\")),value.substring(0,min(value.indexOf(\" \"),value.indexOf(\"(\")))+\"|\"+value.substring(min(value.indexOf(\" \"),value.indexOf(\"(\"))).trim(),if(value.contains(\" \"),value.split(\" \")[0]+\"|\"+value.substring(value.indexOf(\" \")).trim(),value.split(\"(\")[0]+\"|\"+value.substring(value.indexOf(\"(\")).trim()))+if(isError(row.record.cells[\"020$q\"].value[0]),\"\",\"][\"+row.record.cells[\"020$q\"].value[0]),if(isError(row.record.cells[\"020$q\"].value[0]),value.trim()+\"|ISBN\",value.trim()+\"|\"+row.record.cells[\"020$q\"].value[0])),null)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Add pipe between ISBN and descriptor in ``020$z``, and if ``020$q`` has a value in the record, add that after the pipe as well; if there's no descriptor at all, put `ISBN` after the pipe"
    },
    {
        "op": "core/text-transform",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "776$z",
        "expression": "grel:if(isNotNull(value),if(or(value.contains(\" \"),value.contains(\"(\")),if(and(value.contains(\" \"),value.contains(\"(\")),value.substring(0,min(value.indexOf(\" \"),value.indexOf(\"(\")))+\"|\"+value.substring(min(value.indexOf(\" \"),value.indexOf(\"(\"))).trim(),if(value.contains(\" \"),value.split(\" \")[0]+\"|\"+value.substring(value.indexOf(\" \")).trim(),value.split(\"(\")[0]+\"|\"+value.substring(value.indexOf(\"(\")).trim()))+if(isError(row.record.cells[\"776$i\"].value[0]),\"\",\"][\"+row.record.cells[\"776$i\"].value[0]),if(isError(row.record.cells[\"776$i\"].value[0]),value.trim()+\"|ISBN\",value.trim()+\"|\"+row.record.cells[\"776$i\"].value[0])),null)",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10,
        "description": "Add pipe between ISBN and descriptor in ``776$z``, and if ``776$i`` has a value in the record, add that after the pipe as well; if there's no descriptor at all, put `ISBN` after the pipe"
    },
    {
        "op": "core/column-removal",
        "description": "Remove column ``020$q``",
        "columnName": "020$q"
    },
    {
        "op": "core/column-removal",
        "description": "Remove column ``776$i``",
        "columnName": "776$i"
    },
    {
        "op": "core/row-removal",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "SYS Number",
                    "expression": "grel:row.columnNames.length()-filter(row.columnNames,cn,isBlank(cells[cn].value)).length()",
                    "columnName": "SYS Number",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": 2,
                                "l": "2"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                },
                {
                    "type": "list",
                    "name": "SYS Number",
                    "expression": "isBlank(value)",
                    "columnName": "SYS Number",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": false,
                                "l": "false"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                },
                {
                    "type": "list",
                    "name": "Reorder",
                    "expression": "isBlank(value)",
                    "columnName": "Reorder",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": false,
                                "l": "false"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "description": "Remove rows with values only in ``SYS Number`` and ``Reorder``"
    },
    {
        "op": "core/column-addition",
        "description": "Create column ``Count``",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "newColumnName": "Count",
        "columnInsertIndex": 1,
        "baseColumnName": "SYS Number",
        "expression": "grel:row.record.cells[\"SYS Number\"].value[0]+\"-\"+toString(row.index-row.record.fromRowIndex+1)",
        "onError": "set-to-blank"
    },
    {
        "op": "core/transpose-columns-into-rows",
        "description": "Transpose values in columns ``020$a`` ``020$z`` ``776$z`` into single column ``ISBN`` with new column named ``ISBN Subfield`` containing the old column names",
        "startColumnName": "020$a",
        "columnCount": 3,
        "ignoreBlankCells": true,
        "fillDown": false,
        "keyColumnName": "ISBN Subfield",
        "valueColumnName": "ISBN"
    },
    {
        "op": "core/column-removal",
        "description": "Remove column ``Count``",
        "columnName": "Count"
    },
    {
        "op": "core/column-split",
        "description": "Split column ``ISBN`` at pipe",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "columnName": "ISBN",
        "guessCellType": false,
        "removeOriginalColumn": true,
        "mode": "separator",
        "separator": "|",
        "regex": false,
        "maxColumns": 2
    },
    {
        "op": "core/column-rename",
        "description": "Rename column ``ISBN 1`` to ``ISBN Value``",
        "oldColumnName": "ISBN 1",
        "newColumnName": "ISBN Value"
    },
    {
        "op": "core/column-rename",
        "description": "Rename column ``ISBN 2`` to ``ISBN Type``",
        "oldColumnName": "ISBN 2",
        "newColumnName": "ISBN Type"
    },
    {
        "op": "core/column-addition",
        "description": "Create column ``ISBN Length`` based off the length of the value in ``ISBN Value`` in that row",
        "engineConfig": {
            "facets": [],
            "mode": "record-based"
        },
        "newColumnName": "ISBN Length",
        "columnInsertIndex": 1,
        "baseColumnName": "ISBN Value",
        "expression": "grel:toString(length(value))",
        "onError": "set-to-blank"
    },
    {
        "op": "core/text-transform",
        "description": "Remove dashes from values in column ``ISBN Value`` with 17 characters",
        "engineConfig": {
            "facets": [
                {
                    "type": "list",
                    "name": "ISBN Length",
                    "expression": "value",
                    "columnName": "ISBN Length",
                    "invert": false,
                    "omitBlank": false,
                    "omitError": false,
                    "selection": [
                        {
                            "v": {
                                "v": "17",
                                "l": "17"
                            }
                        }
                    ],
                    "selectBlank": false,
                    "selectError": false
                }
            ],
            "mode": "row-based"
        },
        "columnName": "ISBN Value",
        "expression": "grel:replace(value,\"-\",\"\")",
        "onError": "keep-original",
        "repeat": false,
        "repeatCount": 10
    },
    {
        "op": "core/column-removal",
        "columnName": "ISBN Length",
        "description": "Remove column ``ISBN Length``"
    }
]